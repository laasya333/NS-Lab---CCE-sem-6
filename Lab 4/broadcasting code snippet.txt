NodeContainer c0 = NodeContainer (c.Get (0), c.Get (1));
 NodeContainer c1 = NodeContainer (c.Get (0), c.Get (2));
 NS_LOG_INFO ("Build Topology.");
 CsmaHelper csma;
 csma.SetChannelAttribute ("DataRate", DataRateValue (DataRate (5000000)));
 csma.SetChannelAttribute ("Delay", TimeValue (MilliSeconds (2)));
 NetDeviceContainer n0 = csma.Install (c0);
 NetDeviceContainer n1 = csma.Install (c1);
 InternetStackHelper internet;
 internet.Install (c);
 NS_LOG_INFO ("Assign IP Addresses.");
 Ipv4AddressHelper ipv4;
 ipv4.SetBase ("10.1.0.0", "255.255.255.0");
 ipv4.Assign (n0);
 ipv4.SetBase ("192.168.1.0", "255.255.255.0");
 ipv4.Assign (n1);
 // RFC 863 discard port ("9") indicates packet should be thrown away
 // by the system. We allow this silent discard to be overridden
 // by the PacketSink application.
 uint16_t port = 9;
 // Create the OnOff application to send UDP datagrams of size
 // 512 bytes (default) at a rate of 500 Kb/s (default) from n0
 NS_LOG_INFO ("Create Applications.");
 OnOffHelper onoff ("ns3::UdpSocketFactory",
 Address (InetSocketAddress (Ipv4Address ("255.255.255.255"), port)));
 onoff.SetConstantRate (DataRate ("500kb/s"));
 ApplicationContainer app = onoff.Install (c0.Get (0));
 // Start the application
 app.Start (Seconds (1.0));
 app.Stop (Seconds (10.0));
 // Create an optional packet sink to receive these packets
 PacketSinkHelper sink ("ns3::UdpSocketFactory",
 Address (InetSocketAddress (Ipv4Address::GetAny (), port)));
 app = sink.Install (c0.Get (1));
 app.Add (sink.Install (c1.Get (1)));
 app.Start (Seconds (1.0));
 app.Stop (Seconds (10.0));